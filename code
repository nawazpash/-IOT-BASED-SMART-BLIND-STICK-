#define BLYNK_PRINT Serial 
#include <WiFi.h> 
#include <WiFiClient.h> 
#include <BlynkSimpleEsp32.h> 
#include <HTTPClient.h> 
//#include <ESP32WebServer.h> 
BlynkTimer timer; 
int up1 = 18; 
int upval; 
int front = 19; 
int frontval; 
int left = 21; 
int leftval; 
int right =22; 
int rightval; 
int relay = 4; 
int helpbutton = 15; 
int buttonval; 
int voice1 = 23; 
int voice2 = 25; 
int voice3 = 26; 
int voice4 = 27; 
int voice5 = 33; 
int flag; 
String web_top; 
String web_front; 
String web_left; 
String web_right; 
String web_panic; 
String web_moisture;
char auth[] = "8fff08c769f44b81bd45f0cbcd807137"; 
char ssid[] = "blind"; 
char pass[] ="12345678"; 
void setup() 
{ 
// Debug console 
Serial.begin(9600); 
pinMode(up1,INPUT); 
pinMode(front,INPUT); 
pinMode(left,INPUT); 
pinMode(right,INPUT); 
pinMode(voice1,OUTPUT); 
pinMode(voice2,OUTPUT); 
pinMode(voice3,OUTPUT); 
pinMode(voice4,OUTPUT); 
pinMode(voice5,OUTPUT); 
pinMode(relay,OUTPUT); 
digitalWrite(voice1,HIGH); 
digitalWrite(voice2,HIGH); 
digitalWrite(voice3,HIGH); 
digitalWrite(voice4,HIGH); 
digitalWrite(voice5,HIGH); 
digitalWrite(relay,HIGH); 
Blynk.begin(auth,ssid,pass); 
Serial.println("Connected"); 
timer.setInterval(1000,blind); 
timer.setInterval(4000,web_push); 
timer.setInterval(20000,rst); 
timer.setInterval(1000,pan);
} 
void rst() 
{ 
} 
web_top = "-"; 
web_front = "-"; 
web_left = "-"; 
web_right = "-"; 
web_panic = "-"; 
web_moisture = "-"; 
flag=0; 
void web_push() 
{ 
Blynk.virtualWrite(V44,web_top +","+ web_front +","+ web_left + ","+ web_right +","+ 
web_panic+","+web_moisture); 
} 
{ 
} 
void pan() 
buttonval=digitalRead(helpbutton); 
//Serial.println("BUttonstate:" +String(buttonval)); 
if(buttonval==0 && flag==0) 
{ 
web_panic = "IPROB"; 
sms("IPROB"); 
flag=1; 
} 
else{ 
} 
void loop() 
{ 
Blynk.run();
timer.run(); 
} 
void blind() 
{ 
upval=digitalRead(up1); 
frontval=digitalRead(front); 
leftval=digitalRead(left); 
rightval=digitalRead(right); 
//moistureval = digitalRead(moisture); 
Serial.println("front:"+String(frontval)); 
Serial.println("left:"+String(leftval)); 
Serial.println("right:"+String(rightval)); 
Serial.println("UP:"+String(upval)); 
//delay(1000); 
if(upval ==1) 
{ 
} 
web_top ="OBJECT ON TOP"; 
digitalWrite(voice1,LOW); 
digitalWrite(relay,LOW); 
//Serial.println("Playing"); 
else if(frontval==1) 
{ 
} 
web_front ="OBJECT AT FRONT "; 
digitalWrite(voice2,LOW); 
digitalWrite(relay,LOW);
else if(leftval==1) 
{ 
web_left ="OBJECT IN LEFT"; 
digitalWrite(voice3,LOW); 
digitalWrite(relay,LOW); 
} 
else if(rightval==1) 
{ 
} 
web_right ="OBJECT IN RIGHT"; 
digitalWrite(voice4,LOW); 
digitalWrite(relay,LOW); 
//else if(moistureval ==1) 
//{ 
// web_moisture ="Mositure Detected"; 
// digitalWrite(voice5,LOW); 
// 
//} 
else{ 
digitalWrite(relay,HIGH); 
digitalWrite(voice1,HIGH); 
digitalWrite(voice2,HIGH); 
digitalWrite(voice3,HIGH); 
digitalWrite(voice4,HIGH); 
digitalWrite(voice5,HIGH); 
} 
}
void sms(String msg) 
{ 
} 
String message = urlencode(msg); 
up(message,mobile_number); 
void up(String msg,String num) 
{ 
if ((WiFi.status() == WL_CONNECTED)) 
{ 
WiFiClient client; 
HTTPClient http; 
//Serial.print("[HTTP] begin...\n"); 
if (http.begin(client, 
"http://espsms.000webhostapp.com/index.php?msg="+String(msg)+"&num="+String(num))) 
{ 
Serial.print("[HTTP] GET...\n"); 
// start connection and send HTTP header 
int httpCode = http.GET(); 
// httpCode will be negative on error 
if (httpCode > 0) { 
// HTTP header has been send and Server response header has been handled 
Serial.printf("[HTTP] GET... code: %d\n", httpCode); 
// file found at server 
if (httpCode == HTTP_CODE_OK || httpCode == 
HTTP_CODE_MOVED_PERMANENTLY) { 
String payload = http.getString(); 
Serial.println(payload); 
} 
else { 
Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
} 
http.end(); 
} 
else 
{ 
} 
} 
} 
} 
Serial.printf("[HTTP} Unable to connect\n"); 
String urlencode(String str) 
{ 
String encodedString=""; 
char c; 
char code0; 
char code1; 
char code2; 
for (int i =0; i < str.length(); i++){ 
c=str.charAt(i); 
if (c == ' '){ 
encodedString+= '+'; 
} else if (isalnum(c)){ 
encodedString+=c; 
} else{ 
code1=(c & 0xf)+'0'; 
if ((c & 0xf) >9){ 
code1=(c & 0xf) - 10 + 'A'; 
} 
c=(c>>4)&0xf; 
code0=c+'0';
if (c > 9){ 
code0=c - 10 + 'A'; 
} 
code2='\0'; 
encodedString+='%'; 
encodedString+=code0; 
encodedString+=code1; 
//encodedString+=code2; 
} 
yield(); 
} 
delay(100); 
return encodedString; 
}
